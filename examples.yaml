# Copyright 2023 Undistro Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

examples:
  - name: "Kubernetes: Check image registry"
    cel: |
      object.spec.template.spec.containers.all(container,
        params.allowedRegistries.exists(registry,
          ((registry in ['docker.io', 'docker.io/library']) && !container.image.contains('/')) ||
          container.image.startsWith(registry)
        )
      )
    data: |
      params:
        allowedRegistries: 
          - myregistry.com
          - docker.io # use 'docker.io' for Docker Hub
      object:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: nginx
        spec:
          template:
            metadata:
              name: nginx
              labels:
                app: nginx
            spec:
              containers:
                - name: nginx
                  image: nginx # the expression looks for this field
          selector:
            matchLabels:
              app: nginx

  - name: "Kubernetes: Disallow HostPorts"
    cel: |
      // According the Pod Security Standards, HostPorts should be disallowed entirely.
      // https://kubernetes.io/docs/concepts/security/pod-security-standards/#baseline
      
      object.spec.template.spec.containers.all(container,
        !has(container.ports) ||
        container.ports.all(port,
          !has(port.hostPort) ||
          port.hostPort == 0
        )
      )
    data: |
      object:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: nginx
        spec:
          template:
            metadata:
              name: nginx
              labels:
                app: nginx
            spec:
              containers:
                - name: nginx
                  image: nginx
                  ports:
                    - containerPort: 80
                      hostPort: 80 # the expression looks for this field
          selector:
            matchLabels:
              app: nginx

  - name: "Kubernetes: Require non-root containers"
    cel: |
      // According the Pod Security Standards, Containers must be required to run as non-root users.
      // https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
      
      // Pod or Containers must set `securityContext.runAsNonRoot`
      (
        (has(podSpec.securityContext) && has(podSpec.securityContext.runAsNonRoot)) ||
        object.spec.template.spec.containers.all(container,
          has(container.securityContext) && has(container.securityContext.runAsNonRoot)
        )
      )
      &&
      
      // Neither Pod nor Containers should set `securityContext.runAsNonRoot` to false
      (
        (!has(podSpec.securityContext) || !has(podSpec.securityContext.runAsNonRoot) || podSpec.securityContext.runAsNonRoot != false)
        &&
        object.spec.template.spec.containers.all(container,
          !has(container.securityContext) || !has(container.securityContext.runAsNonRoot) || container.securityContext.runAsNonRoot != false
        )
      )
    data: |
      object:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: nginx
        spec:
          template:
            metadata:
              name: nginx
              labels:
                app: nginx
            spec:
              securityContext:
                runAsNonRoot: true # the expression looks for this field
              containers:
                - name: nginx
                  image: nginx
                  securityContext:
                    runAsNonRoot: false # and this one
          selector:
            matchLabels:
              app: nginx

  - name: "Kubernetes: Drop ALL capabilities"
    cel: |
      // According the Pod Security Standards, Containers must drop `ALL` capabilities, and are only permitted to add back the `NET_BIND_SERVICE` capability.
      // https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
      
      // Containers must drop `ALL` capabilities,
      object.spec.template.spec.containers.all(container,
        has(container.securityContext) &&
        has(container.securityContext.capabilities) &&
        has(container.securityContext.capabilities.drop) &&
        size(container.securityContext.capabilities.drop) >= 1 &&
        container.securityContext.capabilities.drop.exists(c, c == 'ALL')
      )
      &&
      // and are only permitted to add back the `NET_BIND_SERVICE` capability
      object.spec.template.spec.containers.all(container,
        !has(container.securityContext) ||
        !has(container.securityContext.capabilities) ||
        !has(container.securityContext.capabilities.add) ||
        container.securityContext.capabilities.add.all(cap, cap in params.allowedCapabilities)
      )
    data: |
      params:
        allowedCapabilities: [NET_BIND_SERVICE]
      object:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: nginx
        spec:
          template:
            metadata:
              name: nginx
              labels:
                app: nginx
            spec:
              containers:
                - name: nginx
                  image: nginx
                  securityContext:
                    capabilities: # the expression looks for this object
                      drop: [ALL]
                      add: [NET_BIND_SERVICE]
          selector:
            matchLabels:
              app: nginx
